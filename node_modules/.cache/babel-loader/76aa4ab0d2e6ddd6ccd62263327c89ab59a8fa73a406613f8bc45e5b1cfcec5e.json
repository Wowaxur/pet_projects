{"ast":null,"code":"import React from'react';import Message from'./message/Message';import MessageSender from'./message-sender/MessageSender';import s2 from'../../junior.module.css';import FriendMessage from'./friend-message/FriendMessage';import avatar from'./avatar.png';/*\n* 1 - описать тип MessageType\n* 2 - описать тип MessagePropsType в файле Message.tsx\n* 3 - в файле Message.tsx отобразить приходящие данные\n* 4 - выполнить пункты 2, 3 в файле FriendMessage.tsx\n* 5 - сделать стили в соответствии с дизайном\n* */ // нужно создать правильный тип вместо any\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";// структуру объекта не менять\nexport const message0={id:0,user:{avatar:avatar,// можно менять\nname:'Some Name'// можно менять\n},message:{text:'some textsome textsome textsome textsome textsome textsome text',// можно менять\ntime:'22:00'// можно менять\n}};export const friendMessage0={id:100,user:{avatar:avatar,// можно менять\nname:'Friend Name'// можно менять\n},message:{text:'зеркальное сообщение для тренировки css',// можно менять\ntime:'22:00'// можно менять\n}};const HW1=()=>{return/*#__PURE__*/_jsxs(\"div\",{id:'hw1',children:[/*#__PURE__*/_jsx(\"div\",{className:s2.hwTitle,children:\"Homework #1\"}),/*#__PURE__*/_jsx(\"div\",{className:s2.hw,children:/*#__PURE__*/_jsxs(\"div\",{className:s2.messageBlock,children:[/*#__PURE__*/_jsx(Message,{message:message0}),/*#__PURE__*/_jsx(FriendMessage,{message:friendMessage0}),/*#__PURE__*/_jsx(MessageSender,{M:Message})]})})]});};export default HW1;","map":{"version":3,"names":["React","Message","MessageSender","s2","FriendMessage","avatar","jsx","_jsx","jsxs","_jsxs","message0","id","user","name","message","text","time","friendMessage0","HW1","children","className","hwTitle","hw","messageBlock","M"],"sources":["/Users/vld/WebTools/pet_projects/src/pages/Junior/s2/hw01/HW1.tsx"],"sourcesContent":["import React from 'react'\nimport Message from './message/Message'\nimport MessageSender from './message-sender/MessageSender'\nimport s2 from '../../junior.module.css'\nimport FriendMessage from './friend-message/FriendMessage'\nimport avatar from './avatar.png'\n\n/*\n* 1 - описать тип MessageType\n* 2 - описать тип MessagePropsType в файле Message.tsx\n* 3 - в файле Message.tsx отобразить приходящие данные\n* 4 - выполнить пункты 2, 3 в файле FriendMessage.tsx\n* 5 - сделать стили в соответствии с дизайном\n* */\n\n// нужно создать правильный тип вместо any\ntype UserType = {\n    avatar: string\n    name: string\n}\ntype MessageInfoType ={\n    text: string\n    time: string\n}\n\nexport type MessageType = {\n    id: number\n    user: UserType\n    message: MessageInfoType\n}\n\n// структуру объекта не менять\nexport const message0: MessageType = {\n    id: 0,\n    user: {\n        avatar: avatar, // можно менять\n        name: 'Some Name',  // можно менять\n    },\n    message: {\n        text: 'some textsome textsome textsome textsome textsome textsome text', // можно менять\n        time: '22:00', // можно менять\n    },\n}\nexport const friendMessage0: MessageType = {\n    id: 100,\n    user: {\n        avatar: avatar, // можно менять\n        name: 'Friend Name', // можно менять\n    },\n    message: {\n        text: 'зеркальное сообщение для тренировки css', // можно менять\n        time: '22:00', // можно менять\n    },\n}\n\nconst HW1 = () => {\n    return (\n        <div id={'hw1'}>\n            <div className={s2.hwTitle}>Homework #1</div>\n            <div className={s2.hw}>\n                {/*проверка отображения (не менять)*/}\n                <div className={s2.messageBlock}>\n                    <Message message={message0} />\n                    <FriendMessage message={friendMessage0} />\n                    <MessageSender M={Message} />\n                </div>\n\n                {/*для автоматической проверки дз (не менять)*/}\n\n            </div>\n        </div>\n    )\n}\n\nexport default HW1\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,OAAO,KAAM,mBAAmB,CACvC,MAAO,CAAAC,aAAa,KAAM,gCAAgC,CAC1D,MAAO,CAAAC,EAAE,KAAM,yBAAyB,CACxC,MAAO,CAAAC,aAAa,KAAM,gCAAgC,CAC1D,MAAO,CAAAC,MAAM,KAAM,cAAc,CAEjC;AACA;AACA;AACA;AACA;AACA;AACA,IANA,CAQA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAgBA;AACA,MAAO,MAAM,CAAAC,QAAqB,CAAG,CACjCC,EAAE,CAAE,CAAC,CACLC,IAAI,CAAE,CACFP,MAAM,CAAEA,MAAM,CAAE;AAChBQ,IAAI,CAAE,WAAc;AACxB,CAAC,CACDC,OAAO,CAAE,CACLC,IAAI,CAAE,iEAAiE,CAAE;AACzEC,IAAI,CAAE,OAAS;AACnB,CACJ,CAAC,CACD,MAAO,MAAM,CAAAC,cAA2B,CAAG,CACvCN,EAAE,CAAE,GAAG,CACPC,IAAI,CAAE,CACFP,MAAM,CAAEA,MAAM,CAAE;AAChBQ,IAAI,CAAE,aAAe;AACzB,CAAC,CACDC,OAAO,CAAE,CACLC,IAAI,CAAE,yCAAyC,CAAE;AACjDC,IAAI,CAAE,OAAS;AACnB,CACJ,CAAC,CAED,KAAM,CAAAE,GAAG,CAAGA,CAAA,GAAM,CACd,mBACIT,KAAA,QAAKE,EAAE,CAAE,KAAM,CAAAQ,QAAA,eACXZ,IAAA,QAAKa,SAAS,CAAEjB,EAAE,CAACkB,OAAQ,CAAAF,QAAA,CAAC,aAAW,CAAK,CAAC,cAC7CZ,IAAA,QAAKa,SAAS,CAAEjB,EAAE,CAACmB,EAAG,CAAAH,QAAA,cAElBV,KAAA,QAAKW,SAAS,CAAEjB,EAAE,CAACoB,YAAa,CAAAJ,QAAA,eAC5BZ,IAAA,CAACN,OAAO,EAACa,OAAO,CAAEJ,QAAS,CAAE,CAAC,cAC9BH,IAAA,CAACH,aAAa,EAACU,OAAO,CAAEG,cAAe,CAAE,CAAC,cAC1CV,IAAA,CAACL,aAAa,EAACsB,CAAC,CAAEvB,OAAQ,CAAE,CAAC,EAC5B,CAAC,CAIL,CAAC,EACL,CAAC,CAEd,CAAC,CAED,cAAe,CAAAiB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}