{"ast":null,"code":"import React,{useState}from'react';import s from'./SuperEditableSpan.module.css';import SuperInputText from'../../../hw04/common/c1-SuperInputText/SuperInputText';import editIcon from'./editIcon.svg';import{Simulate}from\"react-dom/test-utils\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";var keyUp=Simulate.keyUp;// тип пропсов обычного инпута\n// тип пропсов обычного спана\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута, кроме type\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\nconst SuperEditableSpan=_ref=>{let{autoFocus,onBlur,onEnter,spanProps,...restProps// все остальные пропсы попадут в объект restProps\n}=_ref;const[editMode,setEditMode]=useState(false);const{children,onDoubleClick,className,defaultText,...restSpanProps}=spanProps||{};const onEnterCallback=()=>{// выключить editMode при нажатии Enter // делают студенты\nsetEditMode(false);onEnter===null||onEnter===void 0?void 0:onEnter();};const onBlurCallback=e=>{// выключить editMode при нажатии за пределами инпута // делают студенты\nsetEditMode(false);onBlur===null||onBlur===void 0?void 0:onBlur(e);};const onDoubleClickCallBack=e=>{// включить editMode при двойном клике // делают студенты\nsetEditMode(true);onDoubleClick===null||onDoubleClick===void 0?void 0:onDoubleClick(e);};const spanClassName=s.span+(className?' '+className:'');return/*#__PURE__*/_jsx(_Fragment,{children:editMode?/*#__PURE__*/_jsx(SuperInputText,{autoFocus:autoFocus||true,onBlur:onBlurCallback,onEnter:onEnterCallback,className:s.input,...restProps}):/*#__PURE__*/_jsxs(\"div\",{className:s.spanBlock,children:[/*#__PURE__*/_jsx(\"img\",{src:editIcon,className:s.pen,alt:'edit'}),/*#__PURE__*/_jsx(\"span\",{onDoubleClick:onDoubleClickCallBack,className:spanClassName,...restSpanProps,children:children||restProps.value||/*#__PURE__*/_jsx(\"span\",{className:s.defaultText,children:defaultText})})]})});};export default SuperEditableSpan;","map":{"version":3,"names":["React","useState","s","SuperInputText","editIcon","Simulate","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","keyUp","SuperEditableSpan","_ref","autoFocus","onBlur","onEnter","spanProps","restProps","editMode","setEditMode","children","onDoubleClick","className","defaultText","restSpanProps","onEnterCallback","onBlurCallback","e","onDoubleClickCallBack","spanClassName","span","input","spanBlock","src","pen","alt","value"],"sources":["/Users/vld/WebTools/pet_projects/src/pages/Junior/s2/hw06/common/c4-SuperEditableSpan/SuperEditableSpan.tsx"],"sourcesContent":["import React, {\n    DetailedHTMLProps,\n    InputHTMLAttributes,\n    HTMLAttributes,\n    useState,\n} from 'react'\nimport s from './SuperEditableSpan.module.css'\nimport SuperInputText from '../../../hw04/common/c1-SuperInputText/SuperInputText'\nimport editIcon from './editIcon.svg'\nimport {Simulate} from \"react-dom/test-utils\";\nimport keyUp = Simulate.keyUp;\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement>\n// тип пропсов обычного спана\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>,\n    HTMLSpanElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута, кроме type\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperEditableSpanType = Omit<DefaultInputPropsType, 'type'> & {\n    // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n\n    spanProps?: DefaultSpanPropsType  & {defaultText?: string}// пропсы для спана\n}\n\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = (\n    {\n        autoFocus,\n        onBlur,\n        onEnter,\n        spanProps,\n\n        ...restProps // все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const {children, onDoubleClick, className, defaultText, ...restSpanProps} =\n    spanProps || {}\n\n    const onEnterCallback = () => {\n        // выключить editMode при нажатии Enter // делают студенты\n        setEditMode(false)\n        onEnter?.()\n    }\n    const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\n        // выключить editMode при нажатии за пределами инпута // делают студенты\n        setEditMode(false)\n        onBlur?.(e)\n    }\n    const onDoubleClickCallBack = (\n        e: React.MouseEvent<HTMLSpanElement, MouseEvent>\n    ) => {\n        // включить editMode при двойном клике // делают студенты\n        setEditMode(true)\n        onDoubleClick?.(e)\n    }\n\n    const spanClassName = s.span\n        + (className ? ' ' + className : '')\n\n    return (\n        <>\n            {editMode ? (\n                <SuperInputText\n                    autoFocus={autoFocus || true}\n                    onBlur={onBlurCallback}\n                    onEnter={onEnterCallback}\n                    className={s.input}\n                    {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n                />\n            ) : (\n                <div className={s.spanBlock}>\n                    <img\n                        src={editIcon}\n                        className={s.pen}\n                        alt={'edit'}\n                    />\n                    <span\n                        onDoubleClick={onDoubleClickCallBack}\n                        className={spanClassName}\n                        {...restSpanProps}\n                    >\n                        {/*если нет захардкодженного текста для спана, то значение инпута*/}\n\n                        {children || restProps.value || <span className={s.defaultText}>{defaultText}</span>}\n                    </span>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default SuperEditableSpan\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAIRC,QAAQ,KACL,OAAO,CACd,MAAO,CAAAC,CAAC,KAAM,gCAAgC,CAC9C,MAAO,CAAAC,cAAc,KAAM,uDAAuD,CAClF,MAAO,CAAAC,QAAQ,KAAM,gBAAgB,CACrC,OAAQC,QAAQ,KAAO,sBAAsB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,4BACvC,CAAAC,KAAK,CAAGP,QAAQ,CAACO,KAAK,CAE7B;AAGA;AAIA;AACA;AAUA,KAAM,CAAAC,iBAAkD,CAAGC,IAAA,EAStD,IARD,CACIC,SAAS,CACTC,MAAM,CACNC,OAAO,CACPC,SAAS,CAET,GAAGC,SAAU;AACjB,CAAC,CAAAL,IAAA,CAED,KAAM,CAACM,QAAQ,CAAEC,WAAW,CAAC,CAAGpB,QAAQ,CAAU,KAAK,CAAC,CACxD,KAAM,CAACqB,QAAQ,CAAEC,aAAa,CAAEC,SAAS,CAAEC,WAAW,CAAE,GAAGC,aAAa,CAAC,CACzER,SAAS,EAAI,CAAC,CAAC,CAEf,KAAM,CAAAS,eAAe,CAAGA,CAAA,GAAM,CAC1B;AACAN,WAAW,CAAC,KAAK,CAAC,CAClBJ,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAG,CAAC,CACf,CAAC,CACD,KAAM,CAAAW,cAAc,CAAIC,CAAqC,EAAK,CAC9D;AACAR,WAAW,CAAC,KAAK,CAAC,CAClBL,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAGa,CAAC,CAAC,CACf,CAAC,CACD,KAAM,CAAAC,qBAAqB,CACvBD,CAAgD,EAC/C,CACD;AACAR,WAAW,CAAC,IAAI,CAAC,CACjBE,aAAa,SAAbA,aAAa,iBAAbA,aAAa,CAAGM,CAAC,CAAC,CACtB,CAAC,CAED,KAAM,CAAAE,aAAa,CAAG7B,CAAC,CAAC8B,IAAI,EACrBR,SAAS,CAAG,GAAG,CAAGA,SAAS,CAAG,EAAE,CAAC,CAExC,mBACIjB,IAAA,CAAAI,SAAA,EAAAW,QAAA,CACKF,QAAQ,cACLb,IAAA,CAACJ,cAAc,EACXY,SAAS,CAAEA,SAAS,EAAI,IAAK,CAC7BC,MAAM,CAAEY,cAAe,CACvBX,OAAO,CAAEU,eAAgB,CACzBH,SAAS,CAAEtB,CAAC,CAAC+B,KAAM,IACfd,SAAS,CAChB,CAAC,cAEFV,KAAA,QAAKe,SAAS,CAAEtB,CAAC,CAACgC,SAAU,CAAAZ,QAAA,eACxBf,IAAA,QACI4B,GAAG,CAAE/B,QAAS,CACdoB,SAAS,CAAEtB,CAAC,CAACkC,GAAI,CACjBC,GAAG,CAAE,MAAO,CACf,CAAC,cACF9B,IAAA,SACIgB,aAAa,CAAEO,qBAAsB,CACrCN,SAAS,CAAEO,aAAc,IACrBL,aAAa,CAAAJ,QAAA,CAIhBA,QAAQ,EAAIH,SAAS,CAACmB,KAAK,eAAI/B,IAAA,SAAMiB,SAAS,CAAEtB,CAAC,CAACuB,WAAY,CAAAH,QAAA,CAAEG,WAAW,CAAO,CAAC,CAClF,CAAC,EACN,CACR,CACH,CAAC,CAEX,CAAC,CAED,cAAe,CAAAZ,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}